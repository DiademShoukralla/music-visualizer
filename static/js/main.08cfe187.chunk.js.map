{"version":3,"sources":["Components/Menu.js","Components/ControlBox.js","Components/ToggleLayer.js","Components/CanvasLayer.js","App.js","serviceWorker.js","index.js"],"names":["MenuButton","props","Button","MenuBar","Box","justify","direction","icon","isLocked","Unlock","Lock","onClick","toggleLock","a11yTitle","isPlay","Pause","Play","togglePlay","isMute","Volume","VolumeMute","toggleMute","MusicControlBox","state","musicControlValues","updateVolume","bind","updateRandomness","event","this","setState","volume","target","value","updateMusic","randomness","Grid","rows","columns","areas","gap","gridArea","RangeInput","id","min","max","step","onChange","React","Component","VisualControlBox","VisualControlValues","updateSpores","numSpores","updateVisuals","ToggleLayer","show","Layer","full","plain","updateMusicControlValues","visualControlValues","updateVisualControlValues","background","CanvasLayer","fill","App","showMenu","toggleLayerLocked","musicControls","visualControls","showToggleLayer","onKeyPress","mouseTimeoutHide","setTimeout","clearTimeout","prevState","key","hotKeys","hotKeyPressed","code","newValues","Grommet","Keyboard","onTab","onKeyDown","Main","onMouseMove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08cfe187.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Box, Button} from 'grommet';\r\nimport { Lock, Unlock, Play, Pause, Volume, VolumeMute } from 'grommet-icons';\r\n\r\nconst MenuButton = (props) => (\r\n  <Button {...props} />\r\n);\r\n  \r\nexport const MenuBar = (props) => (\r\n  <Box \r\n    justify=\"evenly\"\r\n    direction=\"row\" \r\n    {...props}>\r\n    \r\n    <MenuButton \r\n      icon={(props.isLocked ? <Unlock/> : <Lock/>)}\r\n      onClick={props.toggleLock}\r\n      a11yTitle={(props.isLocked ? \"Unlock Menu\" : \"Lock Menu\")}\r\n    />\r\n    <MenuButton \r\n      icon={(props.isPlay ? <Pause/> : <Play/>)}\r\n      onClick={props.togglePlay}\r\n      a11yTitle={(props.isPlay ? \"Pause\" : \"Resume\")}\r\n    />\r\n    <MenuButton \r\n      icon={(props.isMute ? <Volume/> : <VolumeMute/>)}\r\n      onClick={props.toggleMute}\r\n      a11yTitle={(props.isMute ? \"Ummute\" : \"Mute\")}\r\n    />\r\n\r\n  </Box>\r\n);\r\n","import React from 'react';\r\nimport { Box, Grid, RangeInput } from 'grommet';\r\n\r\n\r\n//the specific control boxes are actually going to define the type of data\r\nexport class MusicControlBox extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {...props.musicControlValues};\r\n    this.updateVolume = this.updateVolume.bind(this);\r\n    this.updateRandomness = this.updateRandomness.bind(this);\r\n  }\r\n\r\n  updateVolume(event){\r\n    this.setState({volume:event.target.value}, () => this.props.updateMusic(this.state));\r\n  }\r\n\r\n  updateRandomness(event){\r\n    this.setState({randomness:event.target.value}, () => this.props.updateMusic(this.state));\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Grid \r\n        rows={[\"xsmall\", \"xsmall\", \"medium\"]}\r\n        columns={[\"auto\", \"auto\", \"auto\"]}\r\n        areas={[\r\n          [\"volume\", \"volume\", \"volume\"],\r\n          [\"randomness\", \"randomness\", \"medControls2\"],\r\n          [\"largeControls1\", \"largeControls2\", \"largeControls3\"]\r\n        ]}\r\n        gap=\"small\"\r\n        {...this.props} >\r\n        \r\n        <Box\r\n          gridArea=\"volume\">\r\n          <RangeInput\r\n            a11yTitle=\"Volume Control\"\r\n            id=\"volume\"\r\n            min={0}\r\n            max={100}\r\n            step={5}\r\n            value={this.state.volume}\r\n            onChange={this.updateVolume}\r\n          />\r\n        </Box>\r\n\r\n        <Box>\r\n          <RangeInput\r\n            gridArea=\"randomness\"\r\n            a11yTitle=\"Randomness Control\"\r\n            id=\"randomness\"\r\n            min={0}\r\n            max={100}\r\n            step={5}\r\n            value={this.state.randomness}\r\n            onChange={this.updateRandomness}\r\n          />\r\n        </Box>\r\n        \r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport class VisualControlBox extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {...props.VisualControlValues};\r\n    this.updateSpores = this.updateSpores.bind(this);\r\n  }\r\n\r\n  updateSpores(event){\r\n    this.setState({numSpores:event.target.value}, () => this.props.updateVisuals(this.state));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid \r\n        rows={[\"small\", \"medium\", \"large\"]}\r\n        columns={[\"auto\", \"auto\"]}\r\n        areas={[\r\n          [\"spores\", \"smallControls2\"],\r\n          [\"medControls1\", \"medControls1\"],\r\n          [\"largeControls1\", \"largeControls2\"]\r\n        ]}\r\n        gap=\"small\"\r\n        {...this.props} >\r\n        <Box>\r\n          <RangeInput\r\n            gridArea=\"spores\"\r\n            a11yTitle=\"Spores Control\"\r\n            id=\"spores\"\r\n            min={0}\r\n            max={10}\r\n            step={1}\r\n            value={this.state.numSpores}\r\n            onChange={this.updateSpores}\r\n          />\r\n        </Box>\r\n     </Grid>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Box, Grid, Layer } from 'grommet';\r\nimport { MenuBar } from './Menu';\r\nimport { MusicControlBox, VisualControlBox } from './ControlBox';\r\n\r\nfunction ToggleLayer(props) {\r\n  return ((props.show) ? <Layer {...props} full plain>\r\n    <Grid\r\n      rows={[\"xsmall\", \"large\", \"xsmall\"]}\r\n      columns={[\"auto\", \"auto\"]}\r\n      areas={[\r\n        [\"otherControls\", \"otherControls\"],\r\n        [\"musicControls\", \"visualControls\"],\r\n        [\"footer\", \"footer\"]\r\n      ]}\r\n      gap=\"small\">\r\n      <MenuBar \r\n        gridArea=\"otherControls\"\r\n        a11yTitle=\"Other Controls\"\r\n        {...props}\r\n      />\r\n      <MusicControlBox \r\n        gridArea=\"musicControls\" \r\n        a11yTitle=\"Music Controls\"\r\n        musicControlValues={props.musicControlValues}\r\n        updateMusic={props.updateMusicControlValues}\r\n        />\r\n      <VisualControlBox \r\n        gridArea=\"visualControls\" \r\n        a11yTitle=\"Visual Controls\"\r\n        visualControlValues={props.visualControlValues}\r\n        updateVisuals={props.updateVisualControlValues}\r\n        />\r\n      <Box \r\n        gridArea=\"footer\" \r\n        a11yTitle=\"Footer information\"\r\n        background=\"light-2\">\r\n        \r\n      </Box>\r\n    </Grid>\r\n  </Layer> : null)\r\n}\r\n\r\n\r\nexport default ToggleLayer;","import React from 'react';\r\nimport { Box } from 'grommet';\r\n\r\nconst CanvasLayer = (props) => (\r\n  <Box {...props} fill/>\r\n);\r\n\r\nexport default CanvasLayer;","import React from 'react';\nimport { \n  Grommet,\n  Keyboard,\n  Main\n} from 'grommet';\nimport ToggleLayer from './Components/ToggleLayer';\nimport CanvasLayer from './Components/CanvasLayer';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showMenu: true,\n      toggleLayerLocked: false,\n      isPlay: true,\n      isMute: false,\n      musicControls: {\n        volume: 50,\n        randomness: 25\n      },\n      visualControls: {\n        numSpores: 3\n      }\n    }\n    this.showToggleLayer = this.showToggleLayer.bind(this);\n    this.toggleLock = this.toggleLock.bind(this);\n    this.togglePlay = this.togglePlay.bind(this);\n    this.toggleMute = this.toggleMute.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.updateMusic = this.updateMusic.bind(this);\n    this.updateVisuals = this.updateVisuals.bind(this);\n  }\n\n  componentDidMount() {\n    this.mouseTimeoutHide = setTimeout(() => this.setState({showMenu: false}), 1000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseTimeoutHide);\n  }\n\n  showToggleLayer(){\n    clearTimeout(this.mouseTimeoutHide);\n    this.setState({showMenu: true});\n    \n    if(!this.state.toggleLayerLocked){\n      this.mouseTimeoutHide = setTimeout(() => this.setState({showMenu: false}), 1000);\n    }\n  }\n\n  toggleLock(){\n    this.setState(prevState => ({toggleLayerLocked: !prevState.toggleLayerLocked}), this.showToggleLayer);\n  }\n\n  togglePlay(){\n    this.setState(prevState => ({isPlay: !prevState.isPlay}))\n  }\n\n  toggleMute(){\n    this.setState(prevState => ({isMute: !prevState.isMute}))\n  }\n\n  onKeyPress(key){\n    const hotKeys = {\n      MUTE: 'KeyM',\n      PAUSE: 'Space',\n      LOCK: 'KeyL'\n    }\n    let hotKeyPressed = false;\n    if(key.code === hotKeys.MUTE){\n      hotKeyPressed = true;\n      this.toggleMute();\n    } else if (key.code === hotKeys.PAUSE) {\n      hotKeyPressed = true;\n      this.togglePlay();\n    } else if (key.code === hotKeys.LOCK) {\n      hotKeyPressed = true;\n      this.toggleLock();\n    }\n    if(hotKeyPressed){\n      this.showToggleLayer();\n    }\n  }\n\n  updateMusic(newValues){\n    this.setState({musicControls: newValues})\n  }\n\n  updateVisuals(newValues){\n    this.setState({visualControls: newValues})\n  }\n\n  render() {\n    return (\n      <Grommet full>\n        <Keyboard \n          target=\"document\"\n          onTab={this.showToggleLayer}\n          onKeyDown={this.onKeyPress}\n          >\n          <Main onMouseMove={this.showToggleLayer} fill>\n            <CanvasLayer>\n              Volume: {this.state.musicControls.volume}\n              <br/>\n              Randomness: {this.state.musicControls.randomness}\n              <br/>\n              Spores: {this.state.visualControls.numSpores}\n            </CanvasLayer>\n            <ToggleLayer \n              show={this.state.showMenu}\n              isLocked={this.state.toggleLayerLocked}\n              toggleLock={this.toggleLock}\n              isPlay={this.state.isPlay}\n              togglePlay={this.togglePlay}\n              isMute={this.state.isMute}\n              toggleMute={this.toggleMute}\n              musicControlValues={this.state.musicControls}\n              visualControlValues={this.state.visualControls}\n              updateMusicControlValues={this.updateMusic}\n              updateVisualControlValues={this.updateVisuals}\n            />\n          </Main>\n        </Keyboard>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}