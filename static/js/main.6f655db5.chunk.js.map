{"version":3,"sources":["Components/ToggleLayer.js","Components/CanvasLayer.js","App.js","serviceWorker.js","index.js"],"names":["ToggleLayer","props","show","Layer","full","plain","Grid","rows","columns","areas","gap","Box","gridArea","background","direction","a11yTitle","Button","label","onFocus","console","log","CanvasLayer","fill","App","state","showMenu","showToggleLayer","bind","this","mouseTimeoutHide","setTimeout","setState","clearTimeout","Grommet","Keyboard","target","onTab","Main","onMouseMove","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSA+CeA,MA5Cf,SAAqBC,GACnB,OAASA,EAAMC,KAAQ,kBAACC,EAAA,EAAD,iBAAWF,EAAX,CAAkBG,MAAI,EAACC,OAAK,IACjD,kBAACC,EAAA,EAAD,CACEC,KAAM,CAAC,SAAU,QAAS,UAC1BC,QAAS,CAAC,OAAQ,QAClBC,MAAO,CACL,CAAC,gBAAiB,iBAClB,CAAC,gBAAiB,kBAClB,CAAC,SAAU,WAEbC,IAAI,SACJ,kBAACC,EAAA,EAAD,CACEC,SAAS,gBACTC,WAAW,UACXC,UAAU,MACVC,UAAU,kBACV,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,QAAS,WAAKC,QAAQC,IAAI,WAChD,kBAACJ,EAAA,EAAD,CAAQC,MAAM,UACd,kBAACD,EAAA,EAAD,CAAQC,MAAM,UACd,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAEhB,kBAACN,EAAA,EAAD,CACEC,SAAS,gBACTG,UAAU,iBACVF,WAAW,YAGb,kBAACF,EAAA,EAAD,CACEC,SAAS,iBACTG,UAAU,kBACVF,WAAW,YAGb,kBAACF,EAAA,EAAD,CACEC,SAAS,SACTG,UAAU,qBACVF,WAAW,cAIN,MCpCEQ,EAJK,SAACpB,GAAD,OAClB,kBAACU,EAAA,EAAD,iBAASV,EAAT,CAAgBqB,MAAI,MCgDPC,E,kDA1Cb,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IACDuB,MAAQ,CACXC,UAAU,GAEZ,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBALP,E,gEAQG,IAAD,OAClBC,KAAKC,iBAAmBC,YAAW,kBAAM,EAAKC,SAAS,CAACN,UAAU,MAAS,O,6CAI3EO,aAAaJ,KAAKC,oB,wCAGF,IAAD,OACfG,aAAaJ,KAAKC,kBAClBD,KAAKG,SAAS,CAACN,UAAU,IAEzBG,KAAKC,iBAAmBC,YAAW,kBAAM,EAAKC,SAAS,CAACN,UAAU,MAAS,O,+BAI3E,OACE,kBAACQ,EAAA,EAAD,CAAS7B,MAAI,GACX,kBAAC8B,EAAA,EAAD,CACEC,OAAO,WACPC,MAAOR,KAAKF,iBAEZ,kBAACW,EAAA,EAAD,CAAMC,YAAaV,KAAKF,gBAAiBJ,MAAI,GAC3C,kBAAC,EAAD,CAAaT,WAAW,SAAxB,UAGA,kBAAC,EAAD,CAAaX,KAAM0B,KAAKJ,MAAMC,kB,GAnCxBc,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.6f655db5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Box, Button, Grid, Layer } from 'grommet';\r\n\r\nfunction ToggleLayer(props) {\r\n  return ((props.show) ? <Layer {...props} full plain>\r\n    <Grid\r\n      rows={[\"xsmall\", \"large\", \"xsmall\"]}\r\n      columns={[\"auto\", \"auto\"]}\r\n      areas={[\r\n        [\"otherControls\", \"otherControls\"],\r\n        [\"musicControls\", \"visualControls\"],\r\n        [\"footer\", \"footer\"]\r\n      ]}\r\n      gap=\"small\">\r\n      <Box \r\n        gridArea=\"otherControls\" \r\n        background=\"light-2\" \r\n        direction=\"row\" \r\n        a11yTitle=\"Other Controls\">\r\n        <Button label=\"label\" onFocus={()=>{console.log(\"beep\")}}/>\r\n        <Button label=\"label\" />\r\n        <Button label=\"label\" />\r\n        <Button label=\"label\" />\r\n      </Box>\r\n      <Box \r\n        gridArea=\"musicControls\" \r\n        a11yTitle=\"Music Controls\"\r\n        background=\"light-2\">\r\n        \r\n      </Box>\r\n      <Box \r\n        gridArea=\"visualControls\" \r\n        a11yTitle=\"Visual Controls\"\r\n        background=\"light-2\">\r\n        \r\n      </Box>\r\n      <Box \r\n        gridArea=\"footer\" \r\n        a11yTitle=\"Footer information\"\r\n        background=\"light-2\">\r\n        \r\n      </Box>\r\n    </Grid>\r\n  </Layer> : null)\r\n}\r\n\r\n\r\nexport default ToggleLayer;","import React from 'react';\r\nimport { Box } from 'grommet';\r\n\r\nconst CanvasLayer = (props) => (\r\n  <Box {...props} fill/>\r\n);\r\n\r\nexport default CanvasLayer;","import React from 'react';\nimport { \n  Grommet,\n  Keyboard,\n  Main\n} from 'grommet';\nimport ToggleLayer from './Components/ToggleLayer';\nimport CanvasLayer from './Components/CanvasLayer';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showMenu: true\n    }\n    this.showToggleLayer = this.showToggleLayer.bind(this);\n  }\n\n  componentDidMount() {\n    this.mouseTimeoutHide = setTimeout(() => this.setState({showMenu: false}), 1000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseTimeoutHide);\n  }\n\n  showToggleLayer(){\n    clearTimeout(this.mouseTimeoutHide);\n    this.setState({showMenu: true});\n    \n    this.mouseTimeoutHide = setTimeout(() => this.setState({showMenu: false}), 1000);\n  }\n\n  render() {\n    return (\n      <Grommet full>\n        <Keyboard \n          target=\"document\"\n          onTab={this.showToggleLayer}\n          >\n          <Main onMouseMove={this.showToggleLayer} fill>\n            <CanvasLayer background=\"brand\">\n              Canvas\n            </CanvasLayer>\n            <ToggleLayer show={this.state.showMenu}/>\n          </Main>\n        </Keyboard>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}